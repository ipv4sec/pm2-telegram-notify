"use strict";
const pmx = require('pmx');
const pm2 = require('pm2');
const TelegramBot = require('node-telegram-bot-api');
let probe = pmx.probe();
let conf = pmx.initModule({
    widget: {
        type: 'generic',
        logo: 'http://www.creativetechs.com/iq/tip_images/TerminalApp-Icon.png',
        theme: ['#111111', '#1B2228', '#807C7C', '#807C7C'],
        el: {
            probes: false,
            actions: false
        },
        block: {
            actions: false,
            issues: false,
            meta: false,
            cpu: false,
            mem: false,
            main_probes: ['chatId', 'token']
        }
    }
});
probe.metric({
    name: 'chatId',
    value: function () {
        return conf.chatId;
    }
});
probe.metric({
    name: 'token',
    value: function () {
        return conf.token;
    }
});
const bot = new TelegramBot(conf.token, { polling: true });
pm2.launchBus(function (err, bus) {
    if (err) {
        throw err;
    }
    bus.on('process:event', function (e) {
        if (e.manually === true) {
            return;
        }
        let resuly = `
      pm_id: ${e.process.pm_id}\n
      status: ${e.process.status}\n
      HOSTNAME: ${e.process.HOSTNAME}\n
      USER: ${e.process.USER}\n
      PWD: ${e.process.PWD}\n
      pm_cwd: ${e.process.pm_cwd}\n
      pm_exec_path: ${e.process.pm_exec_path}\n
      node_args: ${e.process.node_args}\n
      name: ${e.process.name}\n
      watch: ${e.process.watch}\n
      event: ${e.event}\n
      `;
        bot.sendMessage(conf.chatId, JSON.stringify(resuly));
    });
    bus.on('pm2:kill', function () {
        console.error('PM2 is beeing killed');
    });
});
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 'You chatId is ' + chatId);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0YsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFRO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFBO0lBQzFCLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBRSxDQUFBO0FBQ3BELENBQUMsQ0FBQyxDQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBteCA9IHJlcXVpcmUoJ3BteCcpXHJcbmNvbnN0IHBtMiA9IHJlcXVpcmUoJ3BtMicpXHJcbmNvbnN0IFRlbGVncmFtQm90ID0gcmVxdWlyZSgnbm9kZS10ZWxlZ3JhbS1ib3QtYXBpJylcclxubGV0IHByb2JlID0gcG14LnByb2JlKClcclxubGV0IGNvbmYgPSBwbXguaW5pdE1vZHVsZSh7XHJcbiAgd2lkZ2V0IDoge1xyXG4gICAgdHlwZSAgICAgICAgICAgICA6ICdnZW5lcmljJyxcclxuICAgIGxvZ28gICAgICAgICAgICAgOiAnaHR0cDovL3d3dy5jcmVhdGl2ZXRlY2hzLmNvbS9pcS90aXBfaW1hZ2VzL1Rlcm1pbmFsQXBwLUljb24ucG5nJyxcclxuICAgIHRoZW1lICAgICAgICAgICAgOiBbJyMxMTExMTEnLCAnIzFCMjIyOCcsICcjODA3QzdDJywgJyM4MDdDN0MnXSxcclxuICAgIGVsIDoge1xyXG4gICAgICBwcm9iZXMgIDogZmFsc2UsXHJcbiAgICAgIGFjdGlvbnMgOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGJsb2NrIDoge1xyXG4gICAgICBhY3Rpb25zIDogZmFsc2UsXHJcbiAgICAgIGlzc3VlcyAgOiBmYWxzZSxcclxuICAgICAgbWV0YSAgICA6IGZhbHNlLFxyXG4gICAgICBjcHU6IGZhbHNlLFxyXG4gICAgICBtZW06IGZhbHNlLFxyXG4gICAgICBtYWluX3Byb2JlcyA6IFsnY2hhdElkJywgJ3Rva2VuJ11cclxuICAgIH1cclxuICB9XHJcbn0pXHJcblxyXG5wcm9iZS5tZXRyaWMoe1xyXG4gIG5hbWU6ICdjaGF0SWQnLFxyXG4gIHZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gY29uZi5jaGF0SWRcclxuICB9XHJcbn0pXHJcblxyXG5wcm9iZS5tZXRyaWMoe1xyXG4gIG5hbWU6ICd0b2tlbicsXHJcbiAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBjb25mLnRva2VuXHJcbiAgfVxyXG59KVxyXG5jb25zdCBib3QgPSBuZXcgVGVsZWdyYW1Cb3QoY29uZi50b2tlbiwge3BvbGxpbmc6IHRydWV9KVxyXG5wbTIubGF1bmNoQnVzKGZ1bmN0aW9uIChlcnI6IEVycm9yLCBidXM6IGFueSkge1xyXG4gIGlmIChlcnIpIHtcclxuICAgIHRocm93IGVyclxyXG4gIH1cclxuICBidXMub24oJ3Byb2Nlc3M6ZXZlbnQnLCBmdW5jdGlvbiAoZTogYW55KSB7XHJcbiAgICBpZiAoZS5tYW51YWxseSA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGxldCByZXN1bHk6IGFueSA9XHJcbiAgICAgIGBcclxuICAgICAgcG1faWQ6ICR7IGUucHJvY2Vzcy5wbV9pZH1cXG5cclxuICAgICAgc3RhdHVzOiAkeyBlLnByb2Nlc3Muc3RhdHVzfVxcblxyXG4gICAgICBIT1NUTkFNRTogJHsgZS5wcm9jZXNzLkhPU1ROQU1FfVxcblxyXG4gICAgICBVU0VSOiAkeyBlLnByb2Nlc3MuVVNFUn1cXG5cclxuICAgICAgUFdEOiAkeyBlLnByb2Nlc3MuUFdEfVxcblxyXG4gICAgICBwbV9jd2Q6ICR7IGUucHJvY2Vzcy5wbV9jd2R9XFxuXHJcbiAgICAgIHBtX2V4ZWNfcGF0aDogJHsgZS5wcm9jZXNzLnBtX2V4ZWNfcGF0aH1cXG5cclxuICAgICAgbm9kZV9hcmdzOiAkeyBlLnByb2Nlc3Mubm9kZV9hcmdzfVxcblxyXG4gICAgICBuYW1lOiAkeyBlLnByb2Nlc3MubmFtZX1cXG5cclxuICAgICAgd2F0Y2g6ICR7IGUucHJvY2Vzcy53YXRjaH1cXG5cclxuICAgICAgZXZlbnQ6ICR7IGUuZXZlbnR9XFxuXHJcbiAgICAgIGBcclxuICAgIGJvdC5zZW5kTWVzc2FnZShjb25mLmNoYXRJZCwgSlNPTi5zdHJpbmdpZnkocmVzdWx5KSlcclxuICB9KVxyXG4gIGJ1cy5vbigncG0yOmtpbGwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdQTTIgaXMgYmVlaW5nIGtpbGxlZCcpXHJcbiAgfSlcclxufSlcclxuYm90Lm9uKCdtZXNzYWdlJywgKG1zZzogYW55KSA9PiB7XHJcbiAgY29uc3QgY2hhdElkID0gbXNnLmNoYXQuaWRcclxuICBib3Quc2VuZE1lc3NhZ2UoY2hhdElkLCdZb3UgY2hhdElkIGlzICcgKyBjaGF0SWQgKVxyXG59KVxyXG4iXX0=
