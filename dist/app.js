"use strict";
const pmx = require('pmx');
const pm2 = require('pm2');
const TelegramBot = require('node-telegram-bot-api');
let probe = pmx.probe();
let conf = pmx.initModule({
    widget: {
        type: 'generic',
        logo: 'http://www.creativetechs.com/iq/tip_images/TerminalApp-Icon.png',
        theme: ['#111111', '#1B2228', '#807C7C', '#807C7C'],
        el: {
            probes: false,
            actions: false
        },
        block: {
            actions: false,
            issues: false,
            meta: false,
            cpu: false,
            mem: false,
            main_probes: ['chatId', 'token']
        }
    }
});
probe.metric({
    name: 'chatId',
    value: function () {
        return conf.chatId;
    }
});
probe.metric({
    name: 'token',
    value: function () {
        return conf.token;
    }
});
const bot = new TelegramBot(conf.token, { polling: true });
pm2.launchBus(function (err, bus) {
    if (err) {
        throw err;
    }
    bus.on('process:event', function (e) {
        if (e.manually === true) {
            return;
        }
        let resuly = `
      当前进程: ${e.process.pm_id} <br />
      当前状态: ${e.process.status} <br />
      主机名称: ${e.process.HOSTNAME} <br />
      当前用户: ${e.process.USER} <br />
      当前路径: ${e.process.PWD} <br />
      执行路径: ${e.process.pm_cwd} <br />
      文件路径: ${e.process.pm_exec_path} <br />
      环境参数: ${e.process.node_args} <br />
      应用名称: ${e.process.name} <br />
      应用状态: watch ${e.process.watch} <br />
      当前事件: ${e.event}
      `;
        bot.sendMessage(conf.chatId, JSON.stringify(resuly));
    });
    bus.on('pm2:kill', function () {
        console.error('PM2 is beeing killed');
    });
});
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 'You chatId is ' + chatId);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SixDQUFDLENBQUMsQ0FBQTtBQUNGLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBUTtJQUN6QixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQTtJQUMxQixHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUUsQ0FBQTtBQUNwRCxDQUFDLENBQUMsQ0FBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwbXggPSByZXF1aXJlKCdwbXgnKVxyXG5jb25zdCBwbTIgPSByZXF1aXJlKCdwbTInKVxyXG5jb25zdCBUZWxlZ3JhbUJvdCA9IHJlcXVpcmUoJ25vZGUtdGVsZWdyYW0tYm90LWFwaScpXHJcbmxldCBwcm9iZSA9IHBteC5wcm9iZSgpXHJcbmxldCBjb25mID0gcG14LmluaXRNb2R1bGUoe1xyXG4gIHdpZGdldCA6IHtcclxuICAgIHR5cGUgICAgICAgICAgICAgOiAnZ2VuZXJpYycsXHJcbiAgICBsb2dvICAgICAgICAgICAgIDogJ2h0dHA6Ly93d3cuY3JlYXRpdmV0ZWNocy5jb20vaXEvdGlwX2ltYWdlcy9UZXJtaW5hbEFwcC1JY29uLnBuZycsXHJcbiAgICB0aGVtZSAgICAgICAgICAgIDogWycjMTExMTExJywgJyMxQjIyMjgnLCAnIzgwN0M3QycsICcjODA3QzdDJ10sXHJcbiAgICBlbCA6IHtcclxuICAgICAgcHJvYmVzICA6IGZhbHNlLFxyXG4gICAgICBhY3Rpb25zIDogZmFsc2VcclxuICAgIH0sXHJcbiAgICBibG9jayA6IHtcclxuICAgICAgYWN0aW9ucyA6IGZhbHNlLFxyXG4gICAgICBpc3N1ZXMgIDogZmFsc2UsXHJcbiAgICAgIG1ldGEgICAgOiBmYWxzZSxcclxuICAgICAgY3B1OiBmYWxzZSxcclxuICAgICAgbWVtOiBmYWxzZSxcclxuICAgICAgbWFpbl9wcm9iZXMgOiBbJ2NoYXRJZCcsICd0b2tlbiddXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxucHJvYmUubWV0cmljKHtcclxuICBuYW1lOiAnY2hhdElkJyxcclxuICB2YWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGNvbmYuY2hhdElkXHJcbiAgfVxyXG59KVxyXG5cclxucHJvYmUubWV0cmljKHtcclxuICBuYW1lOiAndG9rZW4nLFxyXG4gIHZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gY29uZi50b2tlblxyXG4gIH1cclxufSlcclxuY29uc3QgYm90ID0gbmV3IFRlbGVncmFtQm90KGNvbmYudG9rZW4sIHtwb2xsaW5nOiB0cnVlfSlcclxucG0yLmxhdW5jaEJ1cyhmdW5jdGlvbiAoZXJyOiBFcnJvciwgYnVzOiBhbnkpIHtcclxuICBpZiAoZXJyKSB7XHJcbiAgICB0aHJvdyBlcnJcclxuICB9XHJcbiAgYnVzLm9uKCdwcm9jZXNzOmV2ZW50JywgZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgaWYgKGUubWFudWFsbHkgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBsZXQgcmVzdWx5OiBhbnkgPVxyXG4gICAgICBgXHJcbiAgICAgIOW9k+WJjei/m+eoizogJHsgZS5wcm9jZXNzLnBtX2lkfSA8YnIgLz5cclxuICAgICAg5b2T5YmN54q25oCBOiAkeyBlLnByb2Nlc3Muc3RhdHVzfSA8YnIgLz5cclxuICAgICAg5Li75py65ZCN56ewOiAkeyBlLnByb2Nlc3MuSE9TVE5BTUV9IDxiciAvPlxyXG4gICAgICDlvZPliY3nlKjmiLc6ICR7IGUucHJvY2Vzcy5VU0VSfSA8YnIgLz5cclxuICAgICAg5b2T5YmN6Lev5b6EOiAkeyBlLnByb2Nlc3MuUFdEfSA8YnIgLz5cclxuICAgICAg5omn6KGM6Lev5b6EOiAkeyBlLnByb2Nlc3MucG1fY3dkfSA8YnIgLz5cclxuICAgICAg5paH5Lu26Lev5b6EOiAkeyBlLnByb2Nlc3MucG1fZXhlY19wYXRofSA8YnIgLz5cclxuICAgICAg546v5aKD5Y+C5pWwOiAkeyBlLnByb2Nlc3Mubm9kZV9hcmdzfSA8YnIgLz5cclxuICAgICAg5bqU55So5ZCN56ewOiAkeyBlLnByb2Nlc3MubmFtZX0gPGJyIC8+XHJcbiAgICAgIOW6lOeUqOeKtuaAgTogd2F0Y2ggJHsgZS5wcm9jZXNzLndhdGNofSA8YnIgLz5cclxuICAgICAg5b2T5YmN5LqL5Lu2OiAkeyBlLmV2ZW50fVxyXG4gICAgICBgXHJcbiAgICBib3Quc2VuZE1lc3NhZ2UoY29uZi5jaGF0SWQsIEpTT04uc3RyaW5naWZ5KHJlc3VseSkpXHJcbiAgfSlcclxuICBidXMub24oJ3BtMjpraWxsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc29sZS5lcnJvcignUE0yIGlzIGJlZWluZyBraWxsZWQnKVxyXG4gIH0pXHJcbn0pXHJcbmJvdC5vbignbWVzc2FnZScsIChtc2c6IGFueSkgPT4ge1xyXG4gIGNvbnN0IGNoYXRJZCA9IG1zZy5jaGF0LmlkXHJcbiAgYm90LnNlbmRNZXNzYWdlKGNoYXRJZCwnWW91IGNoYXRJZCBpcyAnICsgY2hhdElkIClcclxufSlcclxuIl19
