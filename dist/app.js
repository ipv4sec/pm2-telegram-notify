"use strict";
const pmx = require('pmx');
const pm2 = require('pm2');
const TelegramBot = require('node-telegram-bot-api');
let probe = pmx.probe();
let conf = pmx.initModule({
    widget: {
        type: 'generic',
        logo: 'http://www.creativetechs.com/iq/tip_images/TerminalApp-Icon.png',
        theme: ['#111111', '#1B2228', '#807C7C', '#807C7C'],
        el: {
            probes: false,
            actions: false
        },
        block: {
            actions: false,
            issues: false,
            meta: false,
            cpu: false,
            mem: false,
            main_probes: ['chatId', 'token']
        }
    }
});
probe.metric({
    name: 'chatId',
    value: function () {
        return conf.chatId;
    }
});
probe.metric({
    name: 'token',
    value: function () {
        return conf.token;
    }
});
const bot = new TelegramBot(conf.token, { polling: true });
pm2.launchBus(function (err, bus) {
    if (err) {
        throw err;
    }
    bus.on('process:event', function (e) {
        if (e.manually === true) {
            return;
        }
        let resuly = `PM2:\n当前进程: ${e.process.pm_id}
           \n当前状态: ${e.process.status}
           \n主机名称: ${e.process.HOSTNAME}
           \n当前用户: ${e.process.USER}
           \n当前路径: ${e.process.PWD}
           \n执行路径: ${e.process.pm_cwd}
           \n文件路径: ${e.process.pm_exec_path}
           \n环境参数: ${e.process.node_args}
           \n应用名称: ${e.process.name}
           \n应用状态: watch ${e.process.watch}
           \n当前事件: ${e.event}
      `;
        bot.sendMessage(conf.chatId, resuly, { parse_mode: 'Markdown' });
    });
    bus.on('pm2:kill', function () {
        console.error('PM2 is beeing killed');
    });
});
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 'You chatId is ' + chatId);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUE7QUFDRixHQUFHLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQVE7SUFDekIsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7SUFDMUIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFFLENBQUE7QUFDcEQsQ0FBQyxDQUFDLENBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcG14ID0gcmVxdWlyZSgncG14JylcclxuY29uc3QgcG0yID0gcmVxdWlyZSgncG0yJylcclxuY29uc3QgVGVsZWdyYW1Cb3QgPSByZXF1aXJlKCdub2RlLXRlbGVncmFtLWJvdC1hcGknKVxyXG5sZXQgcHJvYmUgPSBwbXgucHJvYmUoKVxyXG5sZXQgY29uZiA9IHBteC5pbml0TW9kdWxlKHtcclxuICB3aWRnZXQgOiB7XHJcbiAgICB0eXBlICAgICAgICAgICAgIDogJ2dlbmVyaWMnLFxyXG4gICAgbG9nbyAgICAgICAgICAgICA6ICdodHRwOi8vd3d3LmNyZWF0aXZldGVjaHMuY29tL2lxL3RpcF9pbWFnZXMvVGVybWluYWxBcHAtSWNvbi5wbmcnLFxyXG4gICAgdGhlbWUgICAgICAgICAgICA6IFsnIzExMTExMScsICcjMUIyMjI4JywgJyM4MDdDN0MnLCAnIzgwN0M3QyddLFxyXG4gICAgZWwgOiB7XHJcbiAgICAgIHByb2JlcyAgOiBmYWxzZSxcclxuICAgICAgYWN0aW9ucyA6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgYmxvY2sgOiB7XHJcbiAgICAgIGFjdGlvbnMgOiBmYWxzZSxcclxuICAgICAgaXNzdWVzICA6IGZhbHNlLFxyXG4gICAgICBtZXRhICAgIDogZmFsc2UsXHJcbiAgICAgIGNwdTogZmFsc2UsXHJcbiAgICAgIG1lbTogZmFsc2UsXHJcbiAgICAgIG1haW5fcHJvYmVzIDogWydjaGF0SWQnLCAndG9rZW4nXVxyXG4gICAgfVxyXG4gIH1cclxufSlcclxuXHJcbnByb2JlLm1ldHJpYyh7XHJcbiAgbmFtZTogJ2NoYXRJZCcsXHJcbiAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBjb25mLmNoYXRJZFxyXG4gIH1cclxufSlcclxuXHJcbnByb2JlLm1ldHJpYyh7XHJcbiAgbmFtZTogJ3Rva2VuJyxcclxuICB2YWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGNvbmYudG9rZW5cclxuICB9XHJcbn0pXHJcbmNvbnN0IGJvdCA9IG5ldyBUZWxlZ3JhbUJvdChjb25mLnRva2VuLCB7cG9sbGluZzogdHJ1ZX0pXHJcbnBtMi5sYXVuY2hCdXMoZnVuY3Rpb24gKGVycjogRXJyb3IsIGJ1czogYW55KSB7XHJcbiAgaWYgKGVycikge1xyXG4gICAgdGhyb3cgZXJyXHJcbiAgfVxyXG4gIGJ1cy5vbigncHJvY2VzczpldmVudCcsIGZ1bmN0aW9uIChlOiBhbnkpIHtcclxuICAgIGlmIChlLm1hbnVhbGx5ID09PSB0cnVlKSB7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgbGV0IHJlc3VseTogc3RyaW5nID1cclxuICAgICAgYFBNMjpcXG7lvZPliY3ov5vnqIs6ICR7IGUucHJvY2Vzcy5wbV9pZH1cclxuICAgICAgICAgICBcXG7lvZPliY3nirbmgIE6ICR7IGUucHJvY2Vzcy5zdGF0dXN9XHJcbiAgICAgICAgICAgXFxu5Li75py65ZCN56ewOiAkeyBlLnByb2Nlc3MuSE9TVE5BTUV9XHJcbiAgICAgICAgICAgXFxu5b2T5YmN55So5oi3OiAkeyBlLnByb2Nlc3MuVVNFUn1cclxuICAgICAgICAgICBcXG7lvZPliY3ot6/lvoQ6ICR7IGUucHJvY2Vzcy5QV0R9XHJcbiAgICAgICAgICAgXFxu5omn6KGM6Lev5b6EOiAkeyBlLnByb2Nlc3MucG1fY3dkfVxyXG4gICAgICAgICAgIFxcbuaWh+S7tui3r+W+hDogJHsgZS5wcm9jZXNzLnBtX2V4ZWNfcGF0aH1cclxuICAgICAgICAgICBcXG7njq/looPlj4LmlbA6ICR7IGUucHJvY2Vzcy5ub2RlX2FyZ3N9XHJcbiAgICAgICAgICAgXFxu5bqU55So5ZCN56ewOiAkeyBlLnByb2Nlc3MubmFtZX1cclxuICAgICAgICAgICBcXG7lupTnlKjnirbmgIE6IHdhdGNoICR7IGUucHJvY2Vzcy53YXRjaH1cclxuICAgICAgICAgICBcXG7lvZPliY3kuovku7Y6ICR7IGUuZXZlbnR9XHJcbiAgICAgIGBcclxuICAgIGJvdC5zZW5kTWVzc2FnZShjb25mLmNoYXRJZCwgcmVzdWx5LCB7IHBhcnNlX21vZGU6ICdNYXJrZG93bicgfSlcclxuICB9KVxyXG4gIGJ1cy5vbigncG0yOmtpbGwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdQTTIgaXMgYmVlaW5nIGtpbGxlZCcpXHJcbiAgfSlcclxufSlcclxuYm90Lm9uKCdtZXNzYWdlJywgKG1zZzogYW55KSA9PiB7XHJcbiAgY29uc3QgY2hhdElkID0gbXNnLmNoYXQuaWRcclxuICBib3Quc2VuZE1lc3NhZ2UoY2hhdElkLCdZb3UgY2hhdElkIGlzICcgKyBjaGF0SWQgKVxyXG59KVxyXG4iXX0=
